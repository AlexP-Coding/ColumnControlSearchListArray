<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="ajax" order="6" table-class="display nowrap">

<css lib="datatables columncontrol" />
<js lib="jquery datatables columncontrol">
<![CDATA[

$('#example').DataTable({
	ajax: '../data/options.json',
	columnControl: ['order', [{ extend: 'searchList', ajaxOnly: false }]],
	columns: [
		{ data: 'name' },
		{ data: 'position' },
		{ data: 'office' },
		{ data: 'extn' },
		{ data: 'start_date' },
		{ data: 'salary' }
	],
	ordering: {
		indicators: false,
		handler: false
	}
});
]]>
</js>

<js-vanilla>
<![CDATA[

new DataTable("#example", {
	ajax: '../data/options.json',
	columnControl: ['order', [{ extend: 'searchList', ajaxOnly: false }]],
	columns: [
		{ data: 'name' },
		{ data: 'position' },
		{ data: 'office' },
		{ data: 'extn' },
		{ data: 'start_date' },
		{ data: 'salary' }
	],
	ordering: {
		indicators: false,
		handler: false
	}
});
]]>
</js-vanilla>

<title lib="ColumnControl">Options via Ajax and local</title>

<info><![CDATA[

In the [previous example](./ajaxOnly.html) we saw that if `-init ajax` is used to load data, the `-content searchList` is only shown for columns which have the options in the JSON data. Equally, we've also seen [in the basic example](./basic.html) that `-content searchList` can derive the list of options from the loaded data.

If you wish to mix the two (i.e. use load data for the options if they aren't specified in the JSON) you can do so with the `ajaxOnly` option of `-content searchList`. That is done in this example and you'll be able to note that while _Position_ and _Office_ have options loaded via Ajax ([per the previous example](./ajaxOnly.html)), the other columns also have search lists and these are derived locally.

]]></info>

</dt-example>
