<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="3">

<css lib="datatables columncontrol" />
<js lib="jquery datatables columncontrol">
<![CDATA[

$('#example').DataTable({
	columnControl: {
		target: 1,
		content: ['search']
	}
});
]]>
</js>

<js-vanilla>
<![CDATA[

new DataTable('#example', {
	columnControl: {
		target: 1,
		content: ['search']
	}
});
]]>
</js-vanilla>

<title lib="ColumnControl">Second header row</title>

<info><![CDATA[

We've seen in the previous examples that `-init columnControl` can be given as an array of content to display. However, that form is actually just a shorthand for its initialisation. It can also be given as an object which provides additional configuration options, including the ability to tell ColumnControl which row in the table header it should insert the content into.

The ability to target a specific row is useful particularly for adding search controls which are always visible in the table (and thus having better discoverability than those in a dropdown) and you want the search input to take a useable amount of space.

The way to tell ColumnControl which row you want the content to be inserted into is defined by the `-init columnControl.target` option. As an integer, it will target that row number in the header (starting from index 0). The content array is then provided using `-init columnControl.content`.

It is also worth highlighting here that if a target row is provided but doesn't exist, then a new header row is automatically created and inserted for the target. That is happening in this example - the HTML only has a single `-tag tr` in the header, but setting `-init columnControl.target` to `1` instructs the software to insert a new row for the search inputs.

Next: [Multiple targets](./multipleRows.html).

]]></info>

</dt-example>
