<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="7">

<css lib="datatables columncontrol" />
<js lib="jquery datatables columncontrol">
<![CDATA[
$('#example').DataTable({
	columnControl: [{
		extend: 'order',
		statusOnly: true
	}],
	ordering: {
		indicators: false
	}
});
]]>
</js>

<js-vanilla>
<![CDATA[
new DataTable('#example', {
	columnControl: [{
		extend: 'order',
		statusOnly: true
	}],
	ordering: {
		indicators: false
	}
});
]]>
</js-vanilla>

<title lib="ColumnControl">Content options</title>

<info><![CDATA[

Thus far we've seen content types being used by defining them in the content array with a string representing the content we want. This uses the content type with its default options, but the content types also offer configuration options (the options are specific to each content type - please see their documentation for full details).

To configure the options for a content type, give an object with the property `extend` set to the content type you want. Indeed, keep in mind that the string option is just a shorthand for the `extend` object - e.g. `'order'` is functionally identical to `{extend: 'order'}`.

This example makes use of the `-content order` content type with its `statusOnly` property enabled. This means that it doesn't listen for events on the button. Instead, the DataTables default listener is used on the whole header (note that `-init ordering.listener` is not specified, unlike some of the other examples). Again, the options for each content type are specific to the content type and you should refer to their documentation for the options available for each.

Next: [Column specific configuration](./columnSpecific.html).

]]></info>

</dt-example>
